#!/usr/bin/python3

# firefox-privacy-restorer - Modify firefox user profile to disable telemetry, built-in advertisements, and data collection.
# Copyright 2017 Shawn Anastasio
# See LICENSE for copyright information.

import platform
import sys
import os
import glob
import argparse
import traceback

if sys.version_info < (3, 5):
    sys.exit("Error: Python 3.5 or newer is required!")

# A phony URL to replace telemetry endpoints with
PHONY_URL = "https://0.0.0.0"

# Dictionary of privacy-related preferences and their optimal value
PREFS = { 
    "browser.newtabpage.activity-stream.feeds.section.topstories.options": "",
    "browser.newtabpage.activity-stream.feeds.section.topstories" : False,
    "browser.newtabpage.activity-stream.feeds.snippets": False,
    "browser.newtabpage.activity-stream.feeds.telemetry" : False,
    "browser.newtabpage.activity-stream.telemetry" : False,
    "browser.newtabpage.activity-stream.telemetry.ping.endpoint" : PHONY_URL,
    "datareporting.healthreport.about.reportUrl" : PHONY_URL,
    "datareporting.healthreport.uploadEnabled" : False,
    "datareporting.policy.dataSubmissionEnabled" : False,
    "experiments.manifest.uri" : False,
    "privacy.donottrackheader.enabled" : True,
    "privacy.donottrackheader.value" : 1,
    "social.whitelist" : "",
    "toolkit.telemetry.archive.enabled": False,
    "toolkit.telemetry.bhrPing.enabled" : False,
    "toolkit.telemetry.enabled" : False,
    "toolkit.telemetry.unified" : False,
    "toolkit.telemetry.newProfilePing.enabled" : False,
    "toolkit.telemetry.firstShutdownPing.enabled" : False,
    "toolkit.telemetry.server" : PHONY_URL,
    "app.shield.optoutstudies.enabled" : False,
    "experiments.enabled" : False,
    "experiments.manifest.uri" : PHONY_URL,
    "extensions.pocket.enabled" : False,
    "extensions.pocket.api" : PHONY_URL
}

def gen_user_pref_call(key, val):
    """
    Generate a javascript user_pref call for the given key, value pair.

    Returns a string.
    """

    res = "user_pref(\""

    # Generate a javascript constant for the given value, dependent on type
    if type(val) is bool:
        val = "true" if val else "false"
    elif type(val) is str:
        val = "\"" + str(val) + "\""
    else:
        val = str(val)
    
    res += str(key)
    res += "\", "
    res += val + ");"

    return res

def gen_user_js():
    """
    Generate a full list of user_pref calls from the above PREFS dictionary.
    Meant to be used as the user's user.js file.

    Returns a list of strings.
    """

    res = ["// This file was automatically generated by firefox-privacy-restorer"]
    for k, v in PREFS.items():
        res.append(gen_user_pref_call(k, v))
    
    return res

def find_profile_folders():
    """
    Trys to find all firefox profiles for the current user.

    Returns a list of found profile folders.
    """
    try:
        system = platform.system()
        if system == "Linux":
            # Linux
            prefs = glob.glob("%s/.mozilla/**/prefs.js" % (os.environ['HOME']), recursive=True)
            folders = [x[:-8] for x in prefs]
            return folders
        elif system == "Darwin":
            # macOS
            prefs = glob.glob("%s/Library/Application Support/Firefox/**/prefs.js" % (os.environ['HOME']), recursive=True)
            folders = [x[:-8] for x in prefs]
            return folders
        elif system == "Windows":
            # Windows
            prefs = glob.glob("%s\\Mozilla\\Firefox\\Profiles\\**\\prefs.js" % (os.environ['APPDATA']), recursive=True)
            folders = [x[:-8] for x in prefs]
            return folders
        else:
            sys.exit("Error: Unsupported OS! Please specify your Firefox profile folder with -p <path>.")

    except:
        traceback.print_exc()
        sys.exit("Error: Failed to automatically find Firefox profile folder! Please specify its path with -p <path>.")

def main():
    parser = argparse.ArgumentParser(description="Modify Firefox preferences to respect your privacy.")
    parser.add_argument("-p", "--path", type=str, help="Specify the path to your Firefox profile directory.")
    parser.add_argument("-f", "--force", action="store_true", help="Don't prompt user to confirm user.js overwrite.")
    args = parser.parse_args()

    # Get path
    paths = []
    if args.path is not None:
        paths.append(args.path)
    else:
        paths += find_profile_folders()
    
    
    # Handle multiple detected paths
    if len(paths) > 1:
        # Prompt user for which profile folder to use
        print("Detected multiple firefox profiles.")
        print("Please pick which one(s) to use:")
        paths_len = len(paths)
        for i in range(1, paths_len+1):
            print("%d. %s" % (i, paths[i-1]))
        while True:
            choice = input("Choice (%d-%d) [all]: " % (1, paths_len))
            if len(choice) == 0 or choice == "all":
                break

            try:
                choice_int = int(choice)
                if choice_int < 1 or choice_int > paths_len:
                    raise ValueError()

                paths = [paths[choice_int - 1]]
                break
            except:
                print("Invalid choice! Please pick a number between %d and %d, or type 'all'" % (1, paths_len))
                continue
    

    # Generate user.js file
    user_js_lines = gen_user_js()
    
    for path in paths:
        path = os.path.join(path, "user.js")
        if not args.force and os.path.exists(path):
            sys.exit("Error: user.js file already exists at path \"%s\". Delete this file before continuing or use -f." % (path))
        
        try:
            with open(path, "w") as f:
                for line in user_js_lines:
                    f.write(line + "\n")
        except:
            traceback.print_exc()
            sys.exit("Error: Failed to write user.js file! Do you have the required permissions?")
    
    print("Firefox user.js profile successfully updated! Please restart Firefox to apply changes.")


if __name__ == "__main__":
    main()
